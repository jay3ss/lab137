<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lab137</title><link href="https://lab137.org/" rel="alternate"></link><link href="https://lab137.org/feeds/all.atom.xml" rel="self"></link><id>https://lab137.org/</id><updated>2020-05-20T19:27:00-07:00</updated><entry><title>Viewing Array Contents During Debugging in VS Code</title><link href="https://lab137.org/articles/viewing-array-contents-during-debugging-in-vs-code/" rel="alternate"></link><published>2020-05-20T19:27:00-07:00</published><updated>2020-05-20T19:27:00-07:00</updated><author><name>Jay Ess</name></author><id>tag:lab137.org,2020-05-20:/articles/viewing-array-contents-during-debugging-in-vs-code/</id><summary type="html">&lt;p&gt;After getting annoyed with adding a bunch of array indices to the watch list for
a program that I was debugging, I went in search of a better solution. I came
across &lt;a href="https://github.com/Microsoft/vscode-cpptools/issues/172"&gt;an issue on the VS Code C/C++ Tools GitHub
repo&lt;/a&gt;. Apparently, you
can use the following pattern …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After getting annoyed with adding a bunch of array indices to the watch list for
a program that I was debugging, I went in search of a better solution. I came
across &lt;a href="https://github.com/Microsoft/vscode-cpptools/issues/172"&gt;an issue on the VS Code C/C++ Tools GitHub
repo&lt;/a&gt;. Apparently, you
can use the following pattern in the watch list instead&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;*(int(*)[10])some_pointer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to see the contents of the array &lt;code&gt;some_pointer&lt;/code&gt; of type &lt;code&gt;int&lt;/code&gt;. Or, basically&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arrSize&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;arrName&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Even better, you can use the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arrName&lt;/span&gt;&lt;span class="nv"&gt;@arrSize&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here's a screenshot of doing it manually&lt;/p&gt;
&lt;p&gt;&lt;img alt="Manually adding array elements during
debug" src="https://lab137.org/img/view_arr_long_way.png"&gt;&lt;/p&gt;
&lt;p&gt;and here's a screenshot of using the shortcut&lt;/p&gt;
&lt;p&gt;&lt;img alt="Shortcut of viewing array elements during
debug" src="https://lab137.org/img/view_arr_shortcut.png"&gt;&lt;/p&gt;
&lt;p&gt;Much better.&lt;/p&gt;</content><category term="articles"></category><category term="til"></category><category term="vscode"></category><category term="debug"></category><category term="c++"></category></entry><entry><title>Using SSH with Git Repositories</title><link href="https://lab137.org/articles/using-ssh-with-git-repositories/" rel="alternate"></link><published>2020-05-02T15:11:00-07:00</published><updated>2020-05-02T15:11:00-07:00</updated><author><name>Jay Ess</name></author><id>tag:lab137.org,2020-05-02:/articles/using-ssh-with-git-repositories/</id><summary type="html">&lt;p&gt;If you've setup your &lt;a href="https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh"&gt;git account to use
SSH&lt;/a&gt;,
then should be pretty straightforward. My usual workflow was to &lt;code&gt;git clone&lt;/code&gt; the
URL of the repository, but I decided to use SSH instead because I was annoyed
with having to always enter my credentials. This is how to do it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you've setup your &lt;a href="https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh"&gt;git account to use
SSH&lt;/a&gt;,
then should be pretty straightforward. My usual workflow was to &lt;code&gt;git clone&lt;/code&gt; the
URL of the repository, but I decided to use SSH instead because I was annoyed
with having to always enter my credentials. This is how to do it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;:For the most part, I use GitHub but just replace &lt;code&gt;github.com&lt;/code&gt; with
whatever service you're using.&lt;/p&gt;
&lt;h2&gt;Cloning a Repository&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="nv"&gt;@github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;reponame&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Changing the Remote to Use SSH&lt;/h2&gt;
&lt;p&gt;If you've already cloned a repo without using SSH, then you can &lt;a href="https://stackoverflow.com/a/11201143/3562890"&gt;modify the
branch to use SSH&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="nv"&gt;@github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;reponame&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="articles"></category><category term="til"></category><category term="git"></category><category term="ssh"></category></entry><entry><title>Converting a PowerPoint PPT to a PDF File</title><link href="https://lab137.org/articles/converting-a-powerpoint-ppt-to-a-pdf-file/" rel="alternate"></link><published>2020-05-01T14:26:00-07:00</published><updated>2020-05-01T14:26:00-07:00</updated><author><name>Jay Ess</name></author><id>tag:lab137.org,2020-05-01:/articles/converting-a-powerpoint-ppt-to-a-pdf-file/</id><summary type="html">&lt;p&gt;I'm currently taking an online class and the professor gives out PowerPoint
slides as part of his lecture. I don't like the LibreOffice version of
PowerPoint (Impress) and prefer to use PDF files. So, I found a simple
one-liner from &lt;a href="https://askubuntu.com/a/104484"&gt;Ask Ubuntu&lt;/a&gt; that's worked well
so far.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;libreoffice --headless --invisible …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I'm currently taking an online class and the professor gives out PowerPoint
slides as part of his lecture. I don't like the LibreOffice version of
PowerPoint (Impress) and prefer to use PDF files. So, I found a simple
one-liner from &lt;a href="https://askubuntu.com/a/104484"&gt;Ask Ubuntu&lt;/a&gt; that's worked well
so far.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;libreoffice --headless --invisible --convert-to pdf *.ppt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="articles"></category><category term="ppt"></category><category term="powerpoint"></category><category term="til"></category><category term="pdf"></category><category term="convert"></category></entry><entry><title>How to Print on the Same Line with Python</title><link href="https://lab137.org/articles/how-to-print-on-the-same-line-with-python/" rel="alternate"></link><published>2019-12-17T16:00:00-08:00</published><updated>2020-05-01T15:51:00-07:00</updated><author><name>Jay Ess</name></author><id>tag:lab137.org,2019-12-17:/articles/how-to-print-on-the-same-line-with-python/</id><summary type="html">&lt;p&gt;Today, I was downloading about 1,600 images and wanted to be able to keep track
of how many images I had downloaded so far and what image that I was currently
downloading. This is typically very easy with Python, but I decided to print
everything on the same line …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today, I was downloading about 1,600 images and wanted to be able to keep track
of how many images I had downloaded so far and what image that I was currently
downloading. This is typically very easy with Python, but I decided to print
everything on the same line so that I my terminal wouldn't get cluttered with
&lt;code&gt;print&lt;/code&gt; statements. This is where I encountered my issue.&lt;/p&gt;
&lt;p&gt;The format of the string that I was printing started out as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s1"&gt;Image&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\r&lt;/code&gt;: is the carriage return which resets the line position to the beginning
of the line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count&lt;/code&gt;: the number of the image that I was downloading&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end&lt;/code&gt;: the character that &lt;code&gt;print&lt;/code&gt; will append to the string that it's printing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flush&lt;/code&gt;: tells &lt;code&gt;print&lt;/code&gt; whether or not it should forcibly flush the stream&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, what's going to happen is that when the string is printed it will
print the string and put the cursor back at the beginning of the line. If this
where done in a loop (probably using &lt;code&gt;time.sleep&lt;/code&gt; too), then you'd get the
effect of the one line counting up. Neat!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s1"&gt;Count&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can put this into a function to make it a little easier to read&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_same_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the function above, we need to use the &lt;code&gt;sep&lt;/code&gt; keyword so that when we use
this function a space isn't added between the &lt;code&gt;\r&lt;/code&gt; character and our string
causing an offset. Now we can use a loop like above and have our code be a bit
more readable (we also don't need the &lt;code&gt;\r&lt;/code&gt; character at the beginning of our
string).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;print_same_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Count&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This worked pretty great, but I encountered trouble when I was reading URLs
from a file and was printing them to the terminal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib.request&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;request&lt;/span&gt;

&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;img&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;SLEEP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="c1"&gt;# seconds&lt;/span&gt;
&lt;span class="n"&gt;urls_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;images.txt&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urls_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Image&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
        &lt;span class="n"&gt;print_same_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlretrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SLEEP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Done! Downloaded &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which resulted in the unexpected output of&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Image&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;https://example.com/image-1.jpg
Image&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;https://example.com/image-2.jpg
Image&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;https://example.com/image-3.jpg
Image&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;https://example.com/image-4.jpg
Image&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;https://example.com/image-5.jpg
Image&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;https://example.com/image-6.jpg
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It took me longer than I'd like to admit to figure out what went wrong. If you
look at the line where I grab the file name (&lt;code&gt;fname&lt;/code&gt;) from the URL, you'll see
that I call the &lt;code&gt;strip&lt;/code&gt; method. Why? Each line of the file had a &lt;code&gt;\n&lt;/code&gt; character
at the end of it. Even though I did it for the file name I &lt;strong&gt;did not&lt;/strong&gt; do it
for the printing of the URL. This one little mistake cost me probably 90 to 120
minutes...&lt;/p&gt;
&lt;p&gt;Once I fixed it, however, it worked like a charm. Below is the fixed example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib.request&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;request&lt;/span&gt;


&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;img&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;SLEEP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="c1"&gt;# seconds&lt;/span&gt;
&lt;span class="n"&gt;urls_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;images.txt&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urls_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;print_same_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Image&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlretrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SLEEP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Done! Downloaded &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="articles"></category><category term="python"></category><category term="print"></category></entry><entry><title>Simple Complex Number Algebra</title><link href="https://lab137.org/articles/simple-complex-number-algebra/" rel="alternate"></link><published>2019-07-19T16:00:00-07:00</published><updated>2019-07-19T16:00:00-07:00</updated><author><name>Jay Ess</name></author><id>tag:lab137.org,2019-07-19:/articles/simple-complex-number-algebra/</id><summary type="html">&lt;p&gt;I decided to start reviewing some of my controls courses from university to
brush up on the fundamentals. While reviewing, I had an "Oh shit" moment when I
realized that I've forgotten some &lt;em&gt;really&lt;/em&gt; basic math. Namely, working with
complex numbers. I decided to write this article so that I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I decided to start reviewing some of my controls courses from university to
brush up on the fundamentals. While reviewing, I had an "Oh shit" moment when I
realized that I've forgotten some &lt;em&gt;really&lt;/em&gt; basic math. Namely, working with
complex numbers. I decided to write this article so that I can easily find a
reference if I ever need it (hopefully it helps you too). (BIG thanks to Dr.
Tabrizi for putting together notes that are very comprehensible.)&lt;/p&gt;
&lt;h2&gt;General Form of a Complex Number&lt;/h2&gt;
&lt;!-- Check the link --&gt;
&lt;p&gt;According to Wikipedia, &lt;a href="https://en.wikipedia.org/wiki/Complex_number" title="Wikipedia - Complex Numbers"&gt;complex numbers&lt;/a&gt; are&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[...] regarded in the mathematical sciences as just as "real" as the real
numbers, and are fundamental in many aspects of the scientific description of
the natural world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Complex numbers can be written in two forms: rectangular and polar. They live
in the 2-dimensional complex plane with the horizontal axis is called the
"real" axis while the vertical axis is called the "imaginary" axis. The figure
below shows this nicely.&lt;/p&gt;
&lt;figure class="image"&gt;
  &lt;img src="https://lab137.org/img/complex_number_rect.svg"
       class="img-responsive align-center"
       alt="A complex number"
       title="A complex number"
       class="center responsive-image"&gt;
  &lt;figcaption&gt;
    A complex number z, as a point (red) and its position vector (blue).
    Image courtesy of &lt;cite&gt;
    &lt;a href="https://en.wikipedia.org/wiki/Complex_number#/media/File:A_plus_bi.svg"&gt;
        LasinIkamusumeFan
    &lt;/a&gt; under the
    &lt;a href="https://creativecommons.org/licenses/by-sa/4.0/deed.en"&gt;
        Creative Commons 4.0 License
    &lt;/a&gt;.
    &lt;/cite&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that in electrical engineering &lt;span class="math"&gt;\(j\)&lt;/span&gt; denotes the imaginary number/axis
so as to avoid confusion with the time-varying current &lt;span class="math"&gt;\(i\)&lt;/span&gt;. This is the
notation that I'll be using throughout this article. If this confuses you,
then just replace every instance of &lt;span class="math"&gt;\(j\)&lt;/span&gt; with &lt;span class="math"&gt;\(i\)&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;Rectangular Form&lt;/h3&gt;
&lt;p&gt;The rectangular form of a complex number is as follows&lt;/p&gt;
&lt;div class="math"&gt;$$
z = a + jb.
$$&lt;/div&gt;
&lt;p&gt;The letters &lt;span class="math"&gt;\(a\)&lt;/span&gt; and &lt;span class="math"&gt;\(b\)&lt;/span&gt; are referred to as the real and imaginary components of
the complex number &lt;span class="math"&gt;\(z\)&lt;/span&gt;, respectively. In the figure above, &lt;span class="math"&gt;\(a\)&lt;/span&gt; is the
horizontal axis while &lt;span class="math"&gt;\(b\)&lt;/span&gt; is the vertical axis.&lt;/p&gt;
&lt;p&gt;You may sometimes see &lt;span class="math"&gt;\(Re(z)\)&lt;/span&gt; and &lt;span class="math"&gt;\(Im(z)\)&lt;/span&gt; to mean the real and imaginary
components of the complex number &lt;span class="math"&gt;\(z\)&lt;/span&gt;, respectively.&lt;/p&gt;
&lt;h3&gt;Polar Form&lt;/h3&gt;
&lt;p&gt;The rectangular form of a complex number is as follows&lt;/p&gt;
&lt;div class="math"&gt;$$
z = \|r\| e^{j\phi}.
$$&lt;/div&gt;
&lt;p&gt;and is shown in the figure below.&lt;/p&gt;
&lt;figure class="image"&gt;
  &lt;img src="https://lab137.org/img/complex_number_polar_opt.svg"
       alt="A complex number"
       title="A complex number"
       class="center responsive-image"&gt;
  &lt;figcaption&gt;
    A complex number z, as a point (red) and its position vector (blue).
    Image courtesy of &lt;cite&gt;
    &lt;a href="https://en.wikipedia.org/wiki/File:Complex_number_illustration_modarg.svg"&gt;
        Oleg Alexandrov
    &lt;/a&gt; under the
    &lt;a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en"&gt;
        Creative Commons 3.0 License
    &lt;/a&gt;.
    &lt;/cite&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;span class="math"&gt;\(\|r\|\)&lt;/span&gt; is the &lt;em&gt;magnitude&lt;/em&gt; and &lt;span class="math"&gt;\(\phi\)&lt;/span&gt; is the &lt;em&gt;phase angle&lt;/em&gt; of the complex
number &lt;span class="math"&gt;\(z\)&lt;/span&gt;, respectively. To help explain this, you can think of a complex
number as a vector in the complex plane with the magnitude being the length of
the vector and the phase angle the direction.&lt;/p&gt;
&lt;h2&gt;Converting Between Forms&lt;/h2&gt;
&lt;p&gt;It's often useful (or necessary) to convert from one form to another to either
get information (such as magnitude) or to aid in calculations (adding complex
numbers is easier when both numbers are in rectangular form).&lt;/p&gt;
&lt;h3&gt;Converting From Polar to Rectangular Form&lt;/h3&gt;
&lt;p&gt;To convert from polar to rectangular form, we will use Euler's formula and
multiply the result by the magnitude &lt;span class="math"&gt;\(\|r\|\)&lt;/span&gt;.&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align}
    z &amp;amp;= \|r\|\left(\cos \phi + j \sin \phi \right) \nonumber \\
      &amp;amp;= a + jb \label{eq:polar_to_rect}
\end{align}
$$&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Interesting side note: Euler made discoveries in so many different
fields that it started getting to the point that there were too many
discoveries/theorems being named after him, so&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[in] an effort to avoid naming everything after Euler, some discoveries and
theorems are attributed to the first person to have proved them &lt;em&gt;after&lt;/em&gt; Euler.
&lt;sup&gt;&lt;a href="#refs"&gt;1&lt;/a&gt;&lt;sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;It usually helps to make everything clear by having examples. So, let's see how
the conversion from polar to rectangular form actually works.&lt;/p&gt;
&lt;p&gt;Let &lt;span class="math"&gt;\(z = 2 \sqrt{2} \, e^{j \, \frac{\pi}{4}}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The first thing that we have to do is identify the magnitude and phase angle.
Here, the magnitude is &lt;span class="math"&gt;\(\|r\| = 2 \sqrt{2}\)&lt;/span&gt; and the phase angle is
&lt;span class="math"&gt;\(\phi = \frac{\pi}{4}\)&lt;/span&gt;. Now, it's just a matter of plugging everything in to
Equation &lt;span class="math"&gt;\(\ref{eq:polar_to_rect}\)&lt;/span&gt;.&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
    a + jb &amp;amp;= \|r\| \left(\cos \phi + j \sin \phi \right) \\
    &amp;amp;= 2 \sqrt{2} \left(\cos \frac{\pi}{4} + j \sin \frac{\pi}{4} \right) \\
    &amp;amp;= 2 \sqrt{2} \left(\frac{\sqrt{2}}{2} + j \frac{\sqrt{2}}{2} \right) \\
    &amp;amp;= \boxed{2 + j2}
\end{align*}
$$&lt;/div&gt;
&lt;h3&gt;Converting from Rectangular to Polar Form&lt;/h3&gt;
&lt;p&gt;To convert from rectangular to polar form, we will need to find the magnitude
and the phase angle of the complex number. To find the magnitude of &lt;span class="math"&gt;\(z\)&lt;/span&gt;, we
will use the formula for the [Euclidean norm] (also known as the modulus, or
norm)&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{equation}
    \|r\| = \sqrt{a^2 + b^2}.
    \label{eq:euclidean_norm}
\end{equation}
$$&lt;/div&gt;
&lt;p&gt;Finding the phase angle can be a little bit tricky (which is what prompted me
to write this article). Although you may be tempted to immediately use
&lt;span class="math"&gt;\(\phi = \tan^{-1}{\frac{b}{a}}\)&lt;/span&gt;, you will quickly run into trouble. This
equation only works for the &lt;em&gt;first&lt;/em&gt; quadrant. Therefore, you must determine
which quadrant the complex number is in, which is the tricky part. Luckily, the
table below shows you exactly how to find this out.&lt;/p&gt;
&lt;!--
    IMPORTANT! Don't remove the space in front of the div! It'll cause MathJax
    to stop rendering in the table
--&gt;
&lt;table class="table is-fullwidth"&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;Conditions&lt;/th&gt;
        &lt;th&gt;Quadrant&lt;/th&gt;
        &lt;th&gt;Range of \(\phi\)&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;\(a \gt 0\,\) and \(b \gt 0\)&lt;/td&gt;
          &lt;td&gt;1&lt;sup&gt;st&lt;/sup&gt; quadrant&lt;/td&gt;
          &lt;td&gt;0° \(\lt \phi \lt\) 90°&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;\(a \gt 0\,\) and \(b \gt 0\)&lt;/td&gt;
          &lt;td&gt;2&lt;sup&gt;nd&lt;/sup&gt; quadrant&lt;/td&gt;
          &lt;td&gt;90° \(\lt \phi \lt\) 180°&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;\(a \gt 0\,\) and \(b \gt 0\)&lt;/td&gt;
          &lt;td&gt;3&lt;sup&gt;rd&lt;/sup&gt; quadrant&lt;/td&gt;
          &lt;td&gt;180° \(\lt \phi \lt\) 270°&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;a \(\gt 0\,\) and b \(\gt 0\)&lt;/td&gt;
          &lt;td&gt;4&lt;sup&gt;th&lt;/sup&gt; quadrant&lt;/td&gt;
          &lt;td&gt;270° \(\lt \phi \lt\) 360°&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
  &lt;/table&gt;

&lt;p&gt;Once you know what quadrant the complex number is in, then finding the phase
angle is pretty straightforward. Below I've created another table that lists
the formula that you need to use to find the (numerical) phase angle dependent
on the quadrant.&lt;/p&gt;
&lt;!--
    IMPORTANT! Don't remove the space in front of the table! It'll cause MathJax
    to stop rendering in the table
--&gt;
&lt;div class="table-container"&gt;
 &lt;table class="table is-hoverable"&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;Quadrant&lt;/th&gt;
        &lt;th&gt;Formula&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;1&lt;sup&gt;st&lt;/sup&gt; quadrant&lt;/td&gt;
          &lt;td&gt;\(\phi = \tan^{-1}{\frac{b}{a}}\)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;2&lt;sup&gt;nd&lt;/sup&gt; quadrant&lt;/td&gt;
          &lt;td&gt;\(\phi = \pi - \tan^{-1}{\frac{\left|b\right|}{a}}\)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;3&lt;sup&gt;rd&lt;/sup&gt; quadrant&lt;/td&gt;
          &lt;td&gt;\(\phi = \pi + \tan^{-1}{\left|\frac{b}{a}\right|}\)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;4&lt;sup&gt;th&lt;/sup&gt; quadrant&lt;/td&gt;
          &lt;td&gt;\(\phi = -\tan^{-1}{\frac{\left|b\right|}{a}}\)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;Let's convert &lt;span class="math"&gt;\(z = \pm 3 \pm j3\)&lt;/span&gt; to polar form.&lt;/p&gt;
&lt;h5&gt;First Quadrant&lt;/h5&gt;
&lt;p&gt;Let's first do &lt;span class="math"&gt;\(z = 3 + j3\)&lt;/span&gt;. It's very simple to find the magnitude so let's do
that first.&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
    \|r\| &amp;amp;= \sqrt{a^2 + b^2} \\
          &amp;amp;= \sqrt{3^2 + 3^2} \\
          &amp;amp;= \sqrt{18} \\
          &amp;amp;= \boxed{3 \sqrt{2}}
\end{align*}
$$&lt;/div&gt;
&lt;p&gt;We can tell that this number is in the first quadrant because both of the real
and imaginary components are positive. Therefore, according to the above
&lt;a href="#quadrants"&gt;table&lt;/a&gt;, we will use &lt;span class="math"&gt;\(\phi = \tan^{-1}{\frac{b}{a}}\)&lt;/span&gt; to find the phase
angle.&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
    \phi &amp;amp;= \tan^{-1}{\frac{b}{a}} \\
         &amp;amp;= \tan^{-1}{\frac{3}{3}} \\
         &amp;amp;= \boxed{\frac{\pi}{4}}
\end{align*}
$$&lt;/div&gt;
&lt;p&gt;Combining the magnitude and phase leaves us with the polar form&lt;/p&gt;
&lt;div class="math"&gt;$$
\boxed{z = 3 \sqrt{2} \, e \, ^{j \frac{\pi}{4}}}
$$&lt;/div&gt;
&lt;h5&gt;Second Quadrant&lt;/h5&gt;
&lt;p&gt;Now, let's do &lt;span class="math"&gt;\(z = -3 + j3\)&lt;/span&gt;. Again, we're going to find the magnitude first.&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
    \|r\| &amp;amp;= \sqrt{\left(-3 \right)^2 + 3^2} \\
          &amp;amp;= \sqrt{18} \\
          &amp;amp;= \boxed{3 \sqrt{2}}
\end{align*}
$$&lt;/div&gt;
&lt;p&gt;We can tell that this number is in the second quadrant because the real
component is negative while the imaginary component is positive.
Therefore, according to the above &lt;a href="#quadrants"&gt;table&lt;/a&gt;, we will use
&lt;span class="math"&gt;\(\phi = \pi - \tan^{-1}{\frac{b}{\left|a\right|}}\)&lt;/span&gt; to find the phase angle.&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
    \phi &amp;amp;= \pi - \tan^{-1}{\frac{b}{\left|a\right|}} \\
         &amp;amp;= \pi - \tan^{-1}{\frac{3}{\left|-3\right|}} \\
         &amp;amp;= \pi - \frac{\pi}{4} \\
         &amp;amp;= \boxed{\frac{3\pi}{4}}
\end{align*}
$$&lt;/div&gt;
&lt;p&gt;Combining the magnitude and phase leaves us with the polar form&lt;/p&gt;
&lt;div class="math"&gt;$$
\boxed{z = 3 \sqrt{2} \, e \, ^{j \frac{3\pi}{4}}}
$$&lt;/div&gt;
&lt;h5&gt;Third Quadrant&lt;/h5&gt;
&lt;p&gt;Now, let's do &lt;span class="math"&gt;\(z = -3 - j3\)&lt;/span&gt;. Again, we're going to find the magnitude first.&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
    \|r\| &amp;amp;= \sqrt{\left(-3 \right)^2 + \left(-3 \right)^2} \\
          &amp;amp;= \sqrt{18} \\
          &amp;amp;= \boxed{3 \sqrt{2}}
\end{align*}
$$&lt;/div&gt;
&lt;p&gt;We can tell that this number is in the third quadrant because both of the real
and imaginary components are negative. Therefore, according to the above
&lt;a href="#quadrants"&gt;table&lt;/a&gt;, we will use &lt;span class="math"&gt;\(\phi = \pi + \tan^{-1}{\left|\frac{b}{a}\right|}\)&lt;/span&gt;
to find the phase angle.&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
    \phi &amp;amp;= \pi + \tan^{-1}{\left|\frac{b}{a}\right|} \\
         &amp;amp;= \pi + \tan^{-1}{\left|\frac{-3}{-3}\right|} \\
         &amp;amp;= \pi + \frac{\pi}{4} \\
         &amp;amp;= \boxed{\frac{5\pi}{4}}
\end{align*}
$$&lt;/div&gt;
&lt;p&gt;Combining the magnitude and phase leaves us with the polar form&lt;/p&gt;
&lt;div class="math"&gt;$$
\boxed{z = 3 \sqrt{2} \, e \, ^{j \frac{5\pi}{4}}}
$$&lt;/div&gt;
&lt;h5&gt;Fourth Quadrant&lt;/h5&gt;
&lt;p&gt;Now, let's do &lt;span class="math"&gt;\(z = 3 - j3\)&lt;/span&gt;. Again, we're going to find the magnitude first.&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
    \|r\| &amp;amp;= \sqrt{3^2 + \left(-3 \right)^2} \\
          &amp;amp;= \sqrt{18} \\
          &amp;amp;= \boxed{3 \sqrt{2}}
\end{align*}
$$&lt;/div&gt;
&lt;p&gt;We can tell that this number is in the fourth quadrant because real component
is positive and the imaginary component is negative. Therefore, according to
the above &lt;a href="#quadrants"&gt;table&lt;/a&gt;, we will use
&lt;span class="math"&gt;\(\phi = -\tan^{-1}{\frac{\left|b\right|}{a}}\)&lt;/span&gt; to find the phase angle.&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
    \phi &amp;amp;= -\tan^{-1}{\frac{\left|b\right|}{a}} \\
         &amp;amp;= -\tan^{-1}{\frac{\left|-3\right|}{-3}} \\
         &amp;amp;= \boxed{-\frac{\pi}{4}}
\end{align*}
$$&lt;/div&gt;
&lt;p&gt;Combining the magnitude and phase leaves us with the polar form&lt;/p&gt;
&lt;div class="math"&gt;$$
\boxed{z = 3 \sqrt{2} \, e \, ^{-j \frac{\pi}{4}}}
$$&lt;/div&gt;
&lt;h2&gt;Arithmetic Operations&lt;/h2&gt;
&lt;p&gt;Now that we know how to convert from one form to another, we can perform
arithmetic operations with complex numbers.&lt;/p&gt;
&lt;h3&gt;Addition&lt;/h3&gt;
&lt;p&gt;It's easiest to add and subtract complex numbers when they're in &lt;em&gt;rectangular&lt;/em&gt;
form. So, the first thing to do is to convert all of the complex numbers to
rectangular form if necessary. Then, you simply add the components together.&lt;/p&gt;
&lt;p&gt;For example, suppose that you have two complex numbers &lt;span class="math"&gt;\(z_1 = a_1 + jb_1\)&lt;/span&gt; and
&lt;span class="math"&gt;\(z_2 = a_2 + jb_2\)&lt;/span&gt;. To get the new number &lt;span class="math"&gt;\(z_3 = z_1 + z_2\)&lt;/span&gt;, you would do the
following&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
    z_3 &amp;amp;= z_1 + z_2 \\
        &amp;amp;= \left(a_1 + jb_1 \right) + \left(a_2 + jb_2 \right) \\
        &amp;amp;= \left(a_1 + a_2 \right) + j\left(b_1 + b_2 \right) \\
        &amp;amp;= a_3 + jb_3.
\end{align*}
$$&lt;/div&gt;
&lt;h3&gt;Subtraction&lt;/h3&gt;
&lt;p&gt;Subtraction works similarly to addition (just like with real numbers). First,
we should make sure that all complex numbers are in rectangular form. Then, we
can simply subtract the components of each complex number.&lt;/p&gt;
&lt;p&gt;For example, suppose that you have two complex numbers &lt;span class="math"&gt;\(z_1 = a_1 + jb_1\)&lt;/span&gt; and
&lt;span class="math"&gt;\(z_2 = a_2 + jb_2\)&lt;/span&gt;. To get the new number &lt;span class="math"&gt;\(z_3 = z_1 + z_2\)&lt;/span&gt; you would do the
following&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
    z_3 &amp;amp;= z_1 - z_2 \\
        &amp;amp;= \left(a_1 + jb_1 \right) - \left(a_2 + jb_2 \right) \\
        &amp;amp;= \left(a_1 - a_2 \right) + j\left(b_1 - b_2 \right) \\
        &amp;amp;= a_3 + jb_3.
\end{align*}
$$&lt;/div&gt;
&lt;h3&gt;Multiplication&lt;/h3&gt;
&lt;p&gt;In contrast to addition and subtraction, multiplication of complex numbers is
more easily performed when all complex numbers are in &lt;em&gt;polar&lt;/em&gt; form.&lt;/p&gt;
&lt;p&gt;The first thing to do when multiplying complex numbers is to make sure to
convert all of them into polar form. Next, we multiply the magnitudes and then
add the phase angles.&lt;/p&gt;
&lt;p&gt;For example, suppose that we have two complex numbers &lt;span class="math"&gt;\(z_1 = r_1 \, e^{j \phi_1}\)&lt;/span&gt;
and &lt;span class="math"&gt;\(z_2 = r_2 \, e^{j \phi_2}\)&lt;/span&gt; and we want to multiply them. To multiply
them, you would do the following&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align}
    z_3 &amp;amp;= z_1 \cdot z_2 \\
        &amp;amp;= \left(r_1 \, e^{j \phi_1} \right) \cdot \left(r_2 \, e^{j \phi_2} \right) \\
        &amp;amp;= \left(r_1 \cdot r_2 \right) \, e^{\left(\phi_1 + \phi_2 \right)}.
\end{align}
$$&lt;/div&gt;
&lt;h3&gt;Division&lt;/h3&gt;
&lt;p&gt;Like multiplication, division of complex numbers is easiest when all of the
complex numbers are in polar form. So, first convert all of the complex numbers
to polar form, then divide the magnitudes and &lt;em&gt;subtract&lt;/em&gt; the phase angles.&lt;/p&gt;
&lt;p&gt;For example, suppose that we have two complex numbers &lt;span class="math"&gt;\(z_1 = r_1 \, e^{j \phi_1}\)&lt;/span&gt;
and &lt;span class="math"&gt;\(z_2 = r_2 \, e^{j \phi_2}\)&lt;/span&gt; and we want to multiply them. To multiply
them, you would do the following&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align}
    z_3 &amp;amp;= \frac{z_1}{z_2} \\
        &amp;amp;= \frac{r_1 \, e^{j \phi_1}}{r_2 \, e^{j \phi_2}} \\
        &amp;amp;= \frac{r_1}{r_2} \, e^{\left(\phi_1 - \phi_2 \right)}.
\end{align}
$$&lt;/div&gt;
&lt;h2&gt;Complex Conjugate&lt;/h2&gt;
&lt;p&gt;Every complex number has a complex conjugate and that conjugate is found by
switching the signs of the imaginary component. For example, if we have a
complex number &lt;span class="math"&gt;\(z = a + jb\)&lt;/span&gt; then its complex conjugate is &lt;span class="math"&gt;\(z^* = a - jb\)&lt;/span&gt;.
Notice how only the sign of the imaginary component became negative and the
real component's sign remained the same. Because we're just switching signs of
the imaginary component, you can think of the complex conjugate as a reflection
about the real axis. Also note the &lt;span class="math"&gt;\(^*\)&lt;/span&gt; next to the variable &lt;span class="math"&gt;\(z\)&lt;/span&gt;. This is one
of the notations to denote a complex conjugate.&lt;/p&gt;
&lt;p&gt;Complex conjugates are very important in math, physics, and engineering and you
should definitely read about the &lt;a href="https://www.allaboutcircuits.com/technical-articles/importance-of-complex-conjugates/" title="All About Circuits - The Importance of Complex Conjugates"&gt;importance of complex conjugates&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article, we learned about the different forms of a complex number and
how to convert between them. We also learned how to add, subtract, multiply,
and divide complex numbers. Finally, we learned how to find the complex
conjugate of a complex number as well. If you have any comments or questions,
please comment below.&lt;/p&gt;
&lt;h2&gt;&lt;a name="refs"&gt;&lt;/a&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_things_named_after_Leonhard_Euler" title="Wikipedia - List of things named after Leonhard Euler"&gt;Wikipedia - List of things named after Leonhard Euler&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- Links --&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="articles"></category><category term="complex numbers"></category><category term="math"></category><category term="algebra"></category><category term="complex conjugate"></category><category term="imaginary numbers"></category></entry><entry><title>C++: Simple Structs Usage</title><link href="https://lab137.org/articles/c-simple-structs-usage/" rel="alternate"></link><published>2019-06-19T12:00:00-07:00</published><updated>2019-06-19T12:00:00-07:00</updated><author><name>Jay Ess</name></author><id>tag:lab137.org,2019-06-19:/articles/c-simple-structs-usage/</id><summary type="html">&lt;p&gt;Similar to arrays, structs allow you to hold a group of data. structs allow
you to group together related members that would be awkwardly expressed as
multiple arrays (e.g., the x- and y-coordinates of a pixel or the name,
address, and telephone number of a person) into one convenient …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Similar to arrays, structs allow you to hold a group of data. structs allow
you to group together related members that would be awkwardly expressed as
multiple arrays (e.g., the x- and y-coordinates of a pixel or the name,
address, and telephone number of a person) into one convenient unit.&lt;/p&gt;
&lt;p&gt;Not only do structs group data, they're also easy to define and use.&lt;/p&gt;
&lt;h2&gt;Declaring a Struct&lt;/h2&gt;
&lt;p&gt;The example below shows the semantics of declaring a struct. Just replace
whatever is inside of the &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; with the appropriate text.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// more declarations...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// notice the semicolon&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For example&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;tag&amp;gt;&lt;/code&gt;: is the name of the struct, so &lt;code&gt;Student&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;data-type&amp;gt;&lt;/code&gt;: is the data type of the member (variable), so &lt;code&gt;int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;member-name&amp;gt;&lt;/code&gt;: is the name of the member (variable), so &lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Put it all together (plus some additional members) and we have&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Student&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="c1"&gt;// Student&amp;#39;s ID number&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// Student&amp;#39;s name&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gpa&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;// Student&amp;#39;s GPA&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gradeLevel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="c1"&gt;// Students current grade level (e.g., 11)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice how I left the tag (&lt;code&gt;Student&lt;/code&gt;) capitalized? I like to do that so when
I'm reading my code I can easily spot the declaration of a struct. This
&lt;code&gt;Student&lt;/code&gt; struct is basically a new data type and we can use it as such.&lt;/p&gt;
&lt;h2&gt;Defining a Struct Variable&lt;/h2&gt;
&lt;p&gt;It's no different defining a variable of type &lt;code&gt;Student&lt;/code&gt; than it is of &lt;code&gt;int&lt;/code&gt;
or &lt;code&gt;double&lt;/code&gt;. For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We just declared a variable named &lt;code&gt;student&lt;/code&gt; with the type of &lt;code&gt;Student&lt;/code&gt;. Simple!&lt;/p&gt;
&lt;h3&gt;Initialization Lists&lt;/h3&gt;
&lt;p&gt;You can also use an initialization list to when defining a struct.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5678&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A. Student&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You don't have to provide an initializer for each member of the struct, but you
can't skip any either. That means that if you skip initializing one member then
you must leave all of the members that follow it uninitialized as well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stu1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6789&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Billy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// works&lt;/span&gt;
&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stu2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6789&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// does not work, skipped &amp;quot;name&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Using a Struct&lt;/h2&gt;
&lt;p&gt;We use the dot (&lt;code&gt;.&lt;/code&gt;) operator to set and access the members of a struct like
below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;johnny&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;johnny&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;johnny&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Johnny B. Goode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;johnny&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gpa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;johnny&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gradeLevel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Student johnny = {1234, &amp;quot;Johnny B. Goode&amp;quot;, 1.1, 7} // also works&lt;/span&gt;

&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ID:&lt;/span&gt;&lt;span class="se"&gt;\t\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;johnny&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Name:&lt;/span&gt;&lt;span class="se"&gt;\t\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;johnny&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GPA:&lt;/span&gt;&lt;span class="se"&gt;\t\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;johnny&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gpa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Grade Level:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;johnny&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gradeLevel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After we compile and run this, the output will be&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="mi"&gt;1234&lt;/span&gt;
&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;Johnny&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Goode&lt;/span&gt;
&lt;span class="n"&gt;GPA&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;
&lt;span class="n"&gt;Grade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This may seem like a lot of work, but its usefulness becomes immediately clear
when we have multiple students.&lt;/p&gt;
&lt;h2&gt;Array of Structs&lt;/h2&gt;
&lt;p&gt;Instead of having to declare multiple arrays (or vectors) or variables we can
declare an array (or vector) of type &lt;code&gt;Student&lt;/code&gt; and use a loop to set or access
the members of each element of the array (or vector). For example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// const int NUMBER_OF_STUDENTS = &amp;lt;pick a number&amp;gt;;&lt;/span&gt;
&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NUMBER_OF_STUDENTS&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Set the member for each element of the array&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NUMBER_OF_STUDENTS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter student ID: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ignore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter student name: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter student GPA: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;gpa&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter student grade level: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;gradeLevel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Print out the member for each element of the array&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NUMBER_OF_STUDENTS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Student #&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ID:&lt;/span&gt;&lt;span class="se"&gt;\t\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Name:&lt;/span&gt;&lt;span class="se"&gt;\t\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GPA:&lt;/span&gt;&lt;span class="se"&gt;\t\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;gpa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Grade Level:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;gradeLevel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Pointer to Structs&lt;/h2&gt;
&lt;p&gt;You define a pointer to a struct in the exact same way that you'd define a
pointer to any other data type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using a pointer to a struct is a &lt;em&gt;little&lt;/em&gt; bit more involved. If you need to
use a pointer to a struct then you have a couple of options with one of them
being &lt;em&gt;much&lt;/em&gt; easier and the preferred way.&lt;/p&gt;
&lt;h3&gt;Dereferencing&lt;/h3&gt;
&lt;p&gt;I'm going to start with the awkward notation first. To dereference a pointer
you use the star (&lt;code&gt;*&lt;/code&gt;) operator just like any other pointer. However, if you
want to access the member of a pointer to a struct you'd &lt;em&gt;think&lt;/em&gt; that the &lt;code&gt;*&lt;/code&gt;
operator would be all that's necessary&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above should print out the string that's at &lt;code&gt;name&lt;/code&gt;, right? Wrong! You're
actually trying to dereference &lt;code&gt;student.name&lt;/code&gt; &lt;em&gt;not&lt;/em&gt; &lt;code&gt;student&lt;/code&gt;. The &lt;code&gt;.&lt;/code&gt;
operator has a higher precedence than &lt;code&gt;*&lt;/code&gt; so you need to use parentheses to
give the &lt;code&gt;*&lt;/code&gt; higher precedence.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Now&lt;/strong&gt; we'll print out the &lt;code&gt;name&lt;/code&gt;. This is very awkward and can actually be
confusing too. This is why the arrow notation is better.&lt;/p&gt;
&lt;h3&gt;Arrow Notation&lt;/h3&gt;
&lt;p&gt;Instead of using the clumsy dereferencing notation we're going to prefer using
the arrow operator (&lt;code&gt;-&amp;gt;&lt;/code&gt;). As you'll see, it's very similar to the dot notation&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is much easier on the eyes.&lt;/p&gt;
&lt;h2&gt;Array Members&lt;/h2&gt;
&lt;p&gt;Structs can have an array as a member, but you have to take care of how you
define them. Member arrays must have their lengths defined in the definition of
the struct &lt;em&gt;unless&lt;/em&gt; it's the last member of the struct
&lt;a href="#references"&gt;[1]&lt;/a&gt;. For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Will compile, flexible length member array declared&lt;/span&gt;
&lt;span class="c1"&gt;// as last member&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Testing1&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Won&amp;#39;t compile, member array length not declared&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Testing2&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Will compile, member array length declared&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Testing3&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To use an array member, you use it just like any other array&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Testing3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Nested Structs&lt;/h2&gt;
&lt;p&gt;You can also have nested structs (one within another). This is done in the
same manner that you'd define any other member. For example, we can create a
new struct that holds a US address&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Address&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;street&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zipcode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and now we can update our &lt;code&gt;Student&lt;/code&gt; struct to include the &lt;code&gt;Address&lt;/code&gt; struct&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Student&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gpa&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gradeLevel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Address&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To access member struct, we use the dot notation twice&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;street&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;123 Fake St.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Springfield&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zipcode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;97475&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;OR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or, if we're using a pointer to a struct we use the arrow and dot operators
together&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;street&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;123 Fake St.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Springfield&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zipcode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;97475&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;OR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We've learned what a struct is, what it's used for, and different ways of using
structs. Now, go on and make use of this knowledge to create some great
programs!&lt;/p&gt;
&lt;h2&gt;&lt;a name="references"&gt;&lt;/a&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.pearson.com/us/higher-education/product/Gaddis-Starting-Out-with-C-from-Control-Structures-to-Objects-8th-Edition/9780133769395.html"&gt;Starting out with C++: From Control Structure Through Objects, 8th Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cprogramming.com/tutorial/lesson7.html"&gt;Structures in C++ - Tutorial - Cprogramming.com&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="articles"></category><category term="C++"></category><category term="struct"></category><category term="beginner"></category></entry><entry><title>Building a Linked Stack: Part 3</title><link href="https://lab137.org/articles/building-a-linked-stack-part-3/" rel="alternate"></link><published>2019-06-12T12:02:00-07:00</published><updated>2019-06-12T12:02:00-07:00</updated><author><name>Jay Ess</name></author><id>tag:lab137.org,2019-06-12:/articles/building-a-linked-stack-part-3/</id><summary type="html">&lt;p&gt;&lt;em&gt;This is the third article in a multi-part series on the
&lt;a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"&gt;stack data structure&lt;/a&gt;.
This series defines what a stack is and what it does, then implements a
link-based stack&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lab137.org/articles/building-a-linked-stack-part-2/"&gt;Earlier&lt;/a&gt;, we learned
about nodes and the top node and we also implemented the &lt;code&gt;is_empty&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt;
methods. In the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This is the third article in a multi-part series on the
&lt;a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"&gt;stack data structure&lt;/a&gt;.
This series defines what a stack is and what it does, then implements a
link-based stack&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lab137.org/articles/building-a-linked-stack-part-2/"&gt;Earlier&lt;/a&gt;, we learned
about nodes and the top node and we also implemented the &lt;code&gt;is_empty&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt;
methods. In the next article we'll finish implementing our &lt;code&gt;LinkedStack&lt;/code&gt; class
by implementing the pop and peek methods.&lt;/p&gt;
&lt;h2&gt;What We Have So Far&lt;/h2&gt;
&lt;p&gt;So far, we've implemented the &lt;code&gt;is_empty&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt; methods. Before we get
going it's a good idea to take a step back and see the big picture. Let's take
a look at what we have at the moment&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LinkedStack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StackInterface&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Defines a link-based stack&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Determines if the stack is empty&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Adds a new entry to the top of the stack&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_empty&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;The Pop Method&lt;/h3&gt;
&lt;p&gt;Now, we're going to implement the &lt;code&gt;pop&lt;/code&gt; method. The specifications from
&lt;a href="https://lab137.org/articles/building-a-linked-stack-part-1/"&gt;the first article&lt;/a&gt;
show that we need to obey the following behavior&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;(new Stack()).pop() = False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(a_stack.push(item)).pop() = True&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This means that if we try to pop an item off of a stack, then &lt;code&gt;pop&lt;/code&gt; should
return &lt;code&gt;False&lt;/code&gt; if the stack is empty and &lt;code&gt;True&lt;/code&gt; otherwise. Pretty
straightforward.&lt;/p&gt;
&lt;p&gt;To get this behavior, we should first check if the stack is empty and
immediately return &lt;code&gt;False&lt;/code&gt; if it is.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Removes the top of the stack&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_empty&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the stack &lt;em&gt;isn't&lt;/em&gt; empty, then we need to remove the first item. A way that
we can do that is to advance the reference to the top node and then return
&lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Putting this together results in&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Removes the top of the stack&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_empty&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Personally, I'm ok with having more than one &lt;code&gt;return&lt;/code&gt; in a function. However,
I'm a firm believer in making sure that one's code tells an easy-to-follow
story (just think of the person that has to read your code next is a homicidal
maniac who is triggered by unclear code) and I think that we can tell the &lt;code&gt;pop&lt;/code&gt;
story a little better.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Removes the top of the stack&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;can_pop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_empty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;can_pop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Advance the top of the stack to the next node&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;can_pop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I believe that the above will give me a slightly longer life.&lt;/p&gt;
&lt;h3&gt;The Peek Method&lt;/h3&gt;
&lt;p&gt;Now, we're going to implement the &lt;code&gt;peek&lt;/code&gt; method. The specifications from
&lt;a href="https://lab137.org/articles/building-a-linked-stack-part-1/"&gt;the first article&lt;/a&gt;
show that we need to obey the following behavior&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;(new Stack()).peek() = error&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(a_stack.push(item)).peek() = item&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This means that if we try to peek at an item of a stack, then &lt;code&gt;peek&lt;/code&gt; should
raise an error if the stack is empty and return the item (without modifying the
stack!) otherwise. Pretty straightforward, but it will require us to create our
own exception.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://docs.python.org/3/library/exceptions.html#Exception"&gt;documentation&lt;/a&gt;
states that when creating user-defined exceptions we should derive from the
&lt;code&gt;Exception&lt;/code&gt; class, so that's what we're going to do. We're going to go with a
meaningful name, otherwise we may not live very long.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# exception.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EmptyException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Exception that&amp;#39;s raised when a data structure is empty&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That's it! Notice how we didn't have to import any modules. Now, let's start
working on &lt;code&gt;peek&lt;/code&gt;. Just like &lt;code&gt;pop&lt;/code&gt;, we need to see if the stack is empty, and
if it is, raise an &lt;code&gt;EmptyException&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Returns the top of the stack&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;EmptyException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Stack is empty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice how we're returning the item with &lt;code&gt;self.top.data&lt;/code&gt; instead of using
&lt;code&gt;self.top&lt;/code&gt;. The first bit returns the item while the second returns the node,
which is &lt;em&gt;not&lt;/em&gt; what we want to do.&lt;/p&gt;
&lt;h3&gt;Some Python Bits&lt;/h3&gt;
&lt;p&gt;Since we're using Python, there's something that we can do to make &lt;em&gt;using&lt;/em&gt; our
code a little easier. We can implement the
&lt;a href="https://docs.python.org/3.7/reference/datamodel.html#object.__repr__"&gt;&lt;code&gt;__repr__&lt;/code&gt; dunder method&lt;/a&gt;.
which will&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;compute the “official” string representation of an object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is nice to have when using the
&lt;abbr title="Read-Eval-Print Loop"&gt;REPL&lt;/abbr&gt;, which we'll be using later.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;]&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Putting it All Together&lt;/h3&gt;
&lt;p&gt;Our complete implementation of the linked stack is as follows&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# interface.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;abc&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StackInterface&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ABC&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;An abstract base class that defines a stack&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="nd"&gt;@abc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Determines if the stack is empty&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="nd"&gt;@abc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Returns the top of the stack&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="nd"&gt;@abc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Removes the top of the stack&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="nd"&gt;@abc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Adds data to the top of the stack&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="nd"&gt;@abc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Adds a new entry to the top of the stack&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="c1"&gt;# stack.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;exception&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EmptyException&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;interface&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StackInterface&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;node&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LinkedStack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StackInterface&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Defines a link-based stack&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Determines if the stack is empty&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Returns the top of the stack&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_empty&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;EmptyException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Stack is empty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Removes the top of the stack&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;can_pop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_empty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;can_pop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# Advance the top of the stack to the next node&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;can_pop&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Adds a new entry to the top of the stack&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;]&amp;#39;&lt;/span&gt;


&lt;span class="c1"&gt;# node.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A node in a chain&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# exception.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EmptyException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Exception that&amp;#39;s raised when a data structure is empty&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Using the Stack&lt;/h2&gt;
&lt;p&gt;Let's play around with the stack a little using the REPL (I prefer IPython). We
can make sure we've met our specifications. As a recap, here they are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;(new Stack()).isEmpty() = True&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(new Stack()).pop() = False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(new Stack()).peek() = error&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(a_stack.push(item)).isEmpty() = False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(a_stack.push(item)).peek() = item&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(a_stack.push(item)).pop() = True&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, now let's fire up that REPL and test out our shiny stack.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinkedStack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_empty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="n"&gt;EmptyException&lt;/span&gt;                            &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1e84&lt;/span&gt;&lt;span class="n"&gt;c3c721a3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;a54ea098db0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;11&lt;/span&gt;         &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Returns the top of the stack&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
     &lt;span class="mi"&gt;12&lt;/span&gt;         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_empt&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;---&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;             &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;EmptyException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Stack is empty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;14&lt;/span&gt;
     &lt;span class="mi"&gt;15&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="n"&gt;EmptyException&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Stack&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_empty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can see that our stack implements the specifications and works quite nicely.
Although this may not be the best (e.g., most efficient) implementation, it
does implement the specifications and in a manner that is clear and tells a
nice story (i.e., we won't get killed with this code, hopefully).&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article, we learned about nodes and the top node and we also
implemented the &lt;code&gt;is_empty&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt; methods. In the next article we'll finish
implementing our &lt;code&gt;LinkedStack&lt;/code&gt; class by implementing the pop and peek methods.&lt;/p&gt;</content><category term="articles"></category><category term="data structure"></category><category term="stack"></category><category term="Python"></category></entry><entry><title>Building a Linked Stack: Part 2</title><link href="https://lab137.org/articles/building-a-linked-stack-part-2/" rel="alternate"></link><published>2019-06-12T12:01:00-07:00</published><updated>2019-06-12T12:01:00-07:00</updated><author><name>Jay Ess</name></author><id>tag:lab137.org,2019-06-12:/articles/building-a-linked-stack-part-2/</id><summary type="html">&lt;p&gt;&lt;em&gt;This is the second article in a multi-part series on the
&lt;a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"&gt;stack data structure&lt;/a&gt;.
This series defines what a stack is and what it does, then implements a
link-based stack&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lab137.org/articles/building-a-linked-stack-part-3/"&gt;Earlier&lt;/a&gt;, we talked
about what a stack is, what a linked stack is, and then we wrote an interface
for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This is the second article in a multi-part series on the
&lt;a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"&gt;stack data structure&lt;/a&gt;.
This series defines what a stack is and what it does, then implements a
link-based stack&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lab137.org/articles/building-a-linked-stack-part-3/"&gt;Earlier&lt;/a&gt;, we talked
about what a stack is, what a linked stack is, and then we wrote an interface
for a stack. In this article, we'll start implementing a &lt;em&gt;singly&lt;/em&gt;-linked stack
starting with implementing a node and then implementing the &lt;code&gt;is_empty&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt;
methods using the stack interface that we made.&lt;/p&gt;
&lt;h2&gt;A Singly-Linked Stack&lt;/h2&gt;
&lt;p&gt;Recall that a stack is a data structure that holds data in
&lt;abbr title="Last In First Out"&gt;LIFO&lt;/abbr&gt; order. When new data is added to
the stack it is added to the top and when data is removed it is removed from
the top. We can also check how many entries are in the stack, check if it's
empty, and get a copy of the top entry too. This is, abstractly, what a stack
is. But, what is a &lt;em&gt;singly&lt;/em&gt;-linked stack?&lt;/p&gt;
&lt;p&gt;A singly-linked stack holds its data as chain of nodes. Each node in the chain
holds the data and a reference to the next node in the chain such as shown in
the figure below (recycled from the previous post). We need this reference to
the next node because it can be anywhere in memory.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A link of nodes" src="https://lab137.org/img/singly-linked-list.svg"&gt;&lt;/p&gt;
&lt;h3&gt;Using the Stack Interface&lt;/h3&gt;
&lt;p&gt;In the previous article we created an interface for a stack. Now is the time to
use it. The way that we're going to use it is by making our &lt;code&gt;LinkedStack&lt;/code&gt; class
a sublcass of the &lt;code&gt;StackInterface&lt;/code&gt; class. By subclassing the &lt;code&gt;StackInterface&lt;/code&gt;
class, we are forced to live up to the specs that we laid out earlier.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LinkedStack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StackInterface&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Defines a link-based stack&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that's it! Now we just have to override the methods declared as abstract
methods in the &lt;code&gt;StackInterface&lt;/code&gt; class.&lt;/p&gt;
&lt;h3&gt;A Node&lt;/h3&gt;
&lt;p&gt;Previously, we learned that a node is something that holds data and a reference
to the next node. Now, let's see how we can define a node. If you're using
Python 3.7+, then you can use the &lt;code&gt;dataclasses&lt;/code&gt; module, otherwise, we're going
to define a node using a vanilla Python class.&lt;/p&gt;
&lt;p&gt;Since a node holds &lt;em&gt;data&lt;/em&gt; and a reference to the &lt;em&gt;next&lt;/em&gt; node, our node class
will have &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt; attributes and we'll implement a dunder method to
make our lives easier.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# node.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A node in a chain&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The default values of the attributes inherently make sense. If we instantiate a
&lt;code&gt;node&lt;/code&gt; object without specifying any data or the next node, then those should
be &lt;code&gt;None&lt;/code&gt;. Next, we'll start connecting multiple nodes together to make the
underlying chain for our linked stack.&lt;/p&gt;
&lt;h3&gt;The Top Node&lt;/h3&gt;
&lt;p&gt;Recall that the chain underlying the linked stack is made up of a series of
nodes, each one pointing to the next. Every chain has a starting point, and in
the linked stack that starting point is called the top node. It serves as a
way to find the other nodes in the stack.&lt;/p&gt;
&lt;p&gt;The top node has two possible states:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Empty (&lt;code&gt;None&lt;/code&gt; is how this will be expressed)&lt;/li&gt;
&lt;li&gt;Occupied and will hold a node&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When we instantiate the linked stack it will be empty so the top node will be
&lt;code&gt;None&lt;/code&gt;. When an entry is pushed onto the stack it gets added to the front and,
therefore, the top will hold the most recently added entry.&lt;/p&gt;
&lt;p&gt;When an entry is popped from the stack the that entry comes from the top which
is the top node. As you can see, most of the action is happening at the top of
the chain.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;__init__&lt;/code&gt; method ends up being&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;The is_empty Method&lt;/h3&gt;
&lt;p&gt;According to our specifications laid out in the previous post, we need to
implement a method that determines if the stack is empty or not. An easy way to
do that is to check if the top node is &lt;code&gt;None&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Determines if the stack is empty&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;The Push Method&lt;/h3&gt;
&lt;p&gt;We just found out that the &lt;code&gt;push&lt;/code&gt; method puts the data at the start of the
chain. How can we implement this? It's actually pretty straightforward, but we
do have to stick to the specification which says that we must accept an entry
parameter and return &lt;code&gt;True&lt;/code&gt; if the entry was successfully added and return
&lt;code&gt;False&lt;/code&gt; otherwise. Here's a pseudocode version of what we're going to do&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new node that we're going to add to the stack (we'll call this
&lt;code&gt;node&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Check if the stack is empty&lt;ol&gt;
&lt;li&gt;If the stack is empty, set the top node to be the node that we just
created&lt;/li&gt;
&lt;li&gt;Otherwise, set &lt;code&gt;node.next&lt;/code&gt; to the top node&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Increase the number of items in the stack&lt;/li&gt;
&lt;li&gt;Return &lt;code&gt;True&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here's the Python code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Adds a new entry to the top of the stack&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_empty&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article, we learned about nodes and the top node and we also
implemented the &lt;code&gt;is_empty&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt; methods. In the next article we'll finish
implementing our &lt;code&gt;LinkedStack&lt;/code&gt; class by implementing the pop and peek methods.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;A link of nodes. Image courtesy of
&lt;a href="https://commons.wikimedia.org/wiki/File:Singly-linked-list.svg"&gt;Lasindi&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="articles"></category><category term="data structure"></category><category term="stack"></category><category term="Python"></category></entry><entry><title>Building a Linked Stack: Part 1</title><link href="https://lab137.org/articles/building-a-linked-stack-part-1/" rel="alternate"></link><published>2019-06-12T12:00:00-07:00</published><updated>2019-06-12T12:00:00-07:00</updated><author><name>Jay Ess</name></author><id>tag:lab137.org,2019-06-12:/articles/building-a-linked-stack-part-1/</id><summary type="html">&lt;p&gt;&lt;em&gt;This is the first article in a multi-part series on the
&lt;a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"&gt;stack data structure&lt;/a&gt;.
This series defines what a stack is and what it does, then implement a
link-based stack&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;What is a Stack?&lt;/h2&gt;
&lt;p&gt;A stack is a data structure that holds data in
&lt;abbr title="Last In First Out"&gt;LIFO&lt;/abbr&gt; order. This means that whatever …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This is the first article in a multi-part series on the
&lt;a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"&gt;stack data structure&lt;/a&gt;.
This series defines what a stack is and what it does, then implement a
link-based stack&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;What is a Stack?&lt;/h2&gt;
&lt;p&gt;A stack is a data structure that holds data in
&lt;abbr title="Last In First Out"&gt;LIFO&lt;/abbr&gt; order. This means that whatever was
the most recent "thing" to be put onto the stack will be the first to be
removed.&lt;/p&gt;
&lt;p&gt;For example, imagine that you are washing a stack of dirty dishes. As you're
washing, every time you clean one plate you pull another off the top of the
stack of dirty dishes. If someone wants to give you more dishes to wash they're
going to put them on top of your stack.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A stack of dirty dishes" src="https://lab137.org/img/stack_of_plates.jpg"&gt;&lt;/p&gt;
&lt;p&gt;That's pretty much what the stack data structure is. It's an ordered collection
of things (with the most recently added thing at the top) and you can perform
certain  operations on it. You can&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;see if the stack is empty&lt;/li&gt;
&lt;li&gt;see how many things are in it&lt;/li&gt;
&lt;li&gt;take an item off of the top (pop!)&lt;/li&gt;
&lt;li&gt;add something to the top (push!)&lt;/li&gt;
&lt;li&gt;see what the item at the top is (peek!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can reword the above list into pseudocode that will make our lives easier
when we start writing some code (it's usually a good idea to put your ideas
into pseudocode before writing actual code).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;(new Stack()).isEmpty() = True&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(new Stack()).pop() = False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(new Stack()).peek() = error&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(a_stack.push(item)).isEmpty() = False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(a_stack.push(item)).peek() = item&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(a_stack.push(item)).pop() = True&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In order, this is what they mean&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A new stack should be empty&lt;/li&gt;
&lt;li&gt;You can't take something off the top of an empty stack&lt;/li&gt;
&lt;li&gt;Trying to see what's at the top of an empty stack results in an error&lt;/li&gt;
&lt;li&gt;A stack with something in it isn't empty&lt;/li&gt;
&lt;li&gt;Looking (peeking) at the top gives you the thing that was most recently
   added&lt;/li&gt;
&lt;li&gt;You can remove something from a non-empty stack&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This may sound somewhat similar to an array. It is, and a stack can be
implemented using an array. But, elements in an array can be accessed at will
while elements in a stack are accessed in LIFO order.&lt;/p&gt;
&lt;h3&gt;Some Applications of Stacks&lt;/h3&gt;
&lt;p&gt;But, what's the point? Why would we want to have a data structure that
remembers which dish we need to wash next? Stacks are actually pretty useful
and common in computing.&lt;/p&gt;
&lt;p&gt;Remember, they keep track of a sequence of elements with the most recent
element at the beginning of the stack. So, we can use a stack to keep track of
which characters have been entered by a user, keeping track of cities visited
when finding a flight path between different cities (backtracking), and
computers use them to hold local variables and return addresses for function
calls (stack frame).&lt;/p&gt;
&lt;h3&gt;Implementations of Stacks&lt;/h3&gt;
&lt;p&gt;There are at least two different ways that we can make a stack: using an array
(or a list in Python) or using a chain of nodes (which we'll call a linked
stack). Here, we're going with a linked stack.&lt;/p&gt;
&lt;h2&gt;The Linked Stack&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;The following discussion is a general discussion about link-based data
structures versus array-based data structures. For Python, the overhead of the
rest of your code can be so large that the overhead of an array-based vs
link-based data structures may not make much of a difference. But, this is
still a useful discussion nonetheless.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Think of an array and how every element in an array is stored in contiguous
blocks of memory, such as the example in the figure below. Each cell is a block
of memory and the number above the cell is its address. When you want to
access an element of an array you use an index such as &lt;code&gt;arr[4]&lt;/code&gt; to access the
fifth element of the array (assuming zero indexing). This is actually an offset
from the address of the first element in the array. This gives us quick and
direct access to the data. This quick and direct access comes at a cost.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A block of memory representing an array" src="https://lab137.org/img/array.svg"&gt;&lt;/p&gt;
&lt;p&gt;When an array has data added to it and it is, extra memory must be allocated
to make room for the data (and then some) and the data must be copied to the
new memory location. This is one of the costs of using an array, the time that
it takes to allocate more space for the array and copying its data to the newly
allocated space. We could preallocate more room for the data ahead of time, but
that would be potentially wasted space (this is actually what Python does with
lists) and increases the complexity of the data structure.&lt;/p&gt;
&lt;p&gt;What about &lt;em&gt;removing&lt;/em&gt; data? If we need to remove data at the end of the array
then we're fine. But, removing data anywhere else requires us to either
remember which elements have been removed (to guard against stale data), or to
readjust all the following elements.&lt;/p&gt;
&lt;p&gt;If we're going to mostly be reading and updating data, or if we know how much
space our stack will need then an array is a good choice to use as the data
store for a stack. Otherwise, if we're going to be doing a lot of adding and
removing data then we should look into using a linked stack.&lt;/p&gt;
&lt;p&gt;A linked stack is made of a &lt;a href="https://en.wikipedia.org/wiki/Linked_data_structure"&gt;set of nodes that are linked
together&lt;/a&gt; by
references, a.k.a the link. Depending on the language, this reference can
be a pointer variable (like in C++) or a variable that holds a reference to the
next node in the chain (what we're going to do with Python). (The point is that
instead of using contiguous memory addresses a linked stack (or linked data
structures in general) use memory from wherever the system allocates space for
you. This means that, for the most part, linked stacks can be as large as you
need them to be.)&lt;/p&gt;
&lt;p&gt;So, a node is an object (&lt;strong&gt;don't&lt;/strong&gt; think of the CS idea of an object just yet!)
that holds data and a reference to another node. If there is no other node,
then that reference is &lt;code&gt;None&lt;/code&gt; in Python (or, &lt;code&gt;nullptr&lt;/code&gt; in C++). In the figure
below, the left side of the node is the data and the right side is a reference
to the next node indicated by an arrow.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A single node" src="https://lab137.org/img/node_scoured.svg"&gt;&lt;/p&gt;
&lt;p&gt;A chain of nodes is shown in the figure below. The head consists of a head node
and the nodes following it. The end of the chain is the block all the way to
the right with an "X" in it. This "X" represents a reference to &lt;code&gt;None&lt;/code&gt; in
Python (or &lt;code&gt;nullptr&lt;/code&gt; in C++) indicating the end of the chain.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A stack of dirty dishes" src="https://lab137.org/img/stack_of_plates.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Now, linked data structures aren't perfect and there will be some tradeoffs to
using one versus using an array. First, they take more memory because they must
contain a reference to the next node in each node in the chain. Second, they do
not support &lt;a href="https://en.wikipedia.org/wiki/Random_access"&gt;random access&lt;/a&gt;. You
must start with the head of the structure and traverse the chain until you
reach the desired entry.&lt;/p&gt;
&lt;h2&gt;The Stack Interface&lt;/h2&gt;
&lt;p&gt;We're going to start with defining an interface for the stack then
move on to implementing the linked stack in the &lt;a href="https://lab137.org/articles/building-a-linked-stack-part-2/"&gt;next
article&lt;/a&gt;. The point of
making an interface is to make sure that we implement the correct methods in
our implementation. Now, this may not seem like it's such a big deal right now
(after all, we're only implementing on type of stack, right?), but if we wanted
to make a different type of stack then we can inherit from this interface and
code to the specifications that are laid out in it (see
&lt;a href="https://softwareengineering.stackexchange.com/a/108681"&gt;these&lt;/a&gt;
&lt;a href="https://softwareengineering.stackexchange.com/a/108267"&gt;answers on SE&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Anyways, we're going to use Python's &lt;code&gt;abc&lt;/code&gt; module to create an &lt;em&gt;interface&lt;/em&gt; that
we'll use later on in our linked stack &lt;em&gt;implementation&lt;/em&gt;. By using the
&lt;a href="https://docs.python.org/3/library/abc.html#abc.ABC"&gt;&lt;code&gt;abc.ABC&lt;/code&gt; class&lt;/a&gt; and the
&lt;a href="https://docs.python.org/3/library/abc.html#abc.abstractmethod"&gt;&lt;code&gt;abc.abstractmethod&lt;/code&gt;
decorator&lt;/a&gt;, we
can insure that who ever uses our interface implements it to the
specifications by implementing the methods that use the &lt;code&gt;abc.abstractmethod&lt;/code&gt;
decorator. If they're not implemented, then a &lt;code&gt;TypeError&lt;/code&gt; will be raised when
the class is attempted to be instantiated. You can get the code from a &lt;a href="https://gist.github.com/jay3ss/5641fa3de11129118dc2fae305135ba8"&gt;gist
on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# interfaces.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;abc&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StackInterface&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ABC&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;An abstract base class that defines a stack&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="nd"&gt;@abc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Determines if the stack is empty&lt;/span&gt;
&lt;span class="sd"&gt;        :return True if the stack is empty, False otherwise&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="nd"&gt;@abc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Returns the top of the stack&lt;/span&gt;
&lt;span class="sd"&gt;        :pre The stack isn&amp;#39;t empty&lt;/span&gt;
&lt;span class="sd"&gt;        :return The entry at the top of the stack&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="nd"&gt;@abc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Removes the entry from the top of the stack&lt;/span&gt;
&lt;span class="sd"&gt;        :post The entry at the top of the stack will be removed, if possible&lt;/span&gt;
&lt;span class="sd"&gt;        :return True if removal was successful, False otherwise&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="nd"&gt;@abc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Adds an entry to the top of the stack&lt;/span&gt;
&lt;span class="sd"&gt;        :post The entry will be added to the top of the stack, if possible&lt;/span&gt;
&lt;span class="sd"&gt;        :return True if addition was successful, False otherwise&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;An abstract base class (which is what the interface here is) cannot be
instantiated, hence the word &lt;em&gt;abstract&lt;/em&gt;. Go ahead and try, I did. The result
was&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;TypeError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Can&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;instantiate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;abstract&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;StackInterface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;abstract&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;is_empty&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;peek&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is good because we've described a stack as a data structure that has these
methods. Any class that subclasses the &lt;code&gt;StackInterface&lt;/code&gt; class &lt;strong&gt;must&lt;/strong&gt;
implement these methods and therefore live up to the specification that we
wrote. If these methods haven't been implemented, then the specifications have
not been met and the subclass can't be instantiated. Neat!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article we talked about what a stack is, what a linked stack is, and
then we wrote an interface for a stack. In the &lt;a href="https://lab137.org/articles/building-a-linked-stack-part-2/"&gt;next
article&lt;/a&gt;, we'll start
implementing the linked stack by implementing the &lt;code&gt;push&lt;/code&gt; method.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"&gt;Stack (Abstract Data Type)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/faq/design.html#how-are-lists-implemented-in-cpython"&gt;How Are Lists Implemented in CPython?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Linked_data_structure"&gt;Linked Data Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pearson.com/us/higher-education/product/Carrano-Data-Abstraction-Problem-Solving-with-C-Walls-and-Mirrors-6th-Edition/9780132923729.html"&gt;Data Abstraction &amp;amp; Problem Solving with C++: Walls and Mirrors, 6th Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pearson.com/us/higher-education/product/Gaddis-Starting-Out-with-C-from-Control-Structures-to-Objects-8th-Edition/9780133769395.html"&gt;Starting out with C++: From Control Structure Through Objects, 8th Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/3/abc/"&gt;PyMOTW 3: abc — Abstract Base Classes &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.robertelder.org/interfaces-most-important-software-engineering-concept/"&gt;Interfaces - The Most Important Software Engineering Concept&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Stack of dirty dishes. Image courtesy of &lt;a href="https://torange.biz"&gt;torange.biz&lt;/a&gt;,
&lt;a href="https://creativecommons.org/licenses/by/4.0/"&gt;License CC-BY 4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A block of memory representing an array. Image courtesy of
&lt;a href="https://commons.wikimedia.org/wiki/User:Jarkko_Piiroinen"&gt;Jarkko Piiroinen&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="articles"></category><category term="data structure"></category><category term="stack"></category><category term="Python"></category></entry></feed>